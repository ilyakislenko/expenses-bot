const logger = require('../utils/logger');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const ru = require('../locales/ru');
const en = require('../locales/en');

class LocalizationService {
  constructor() {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    this.supportedLanguages = {
      'ru': {
        name: '–†—É—Å—Å–∫–∏–π',
        flag: 'üá∑üá∫',
        locale: ru
      },
      'en': {
        name: 'English',
        flag: 'üá∫üá∏',
        locale: en
      }
    };
    
    // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultLanguage = 'ru';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
   */
  getText(language, key, params = {}) {
    try {
      const lang = this.supportedLanguages[language] || this.supportedLanguages[this.defaultLanguage];
      let text = lang.locale[key];
      
      if (!text) {
        logger.warn(`Translation key not found: ${key} for language: ${language}`);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return key;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
      if (params && typeof params === 'object') {
        Object.keys(params).forEach(param => {
          const regex = new RegExp(`{${param}}`, 'g');
          text = text.replace(regex, params[param]);
        });
      }
      
      return text;
    } catch (error) {
      logger.error('Error in getText:', error);
      return key;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
   */
  getSupportedLanguages() {
    return Object.keys(this.supportedLanguages).map(code => ({
      code,
      name: this.supportedLanguages[code].name,
      flag: this.supportedLanguages[code].flag
    }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
   */
  isLanguageSupported(language) {
    return !!this.supportedLanguages[language];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getDefaultLanguage() {
    return this.defaultLanguage;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
   */
  getLanguageInfo(language) {
    return this.supportedLanguages[language] || this.supportedLanguages[this.defaultLanguage];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  formatMessage(language, key, params = {}) {
    return this.getText(language, key, params);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
   */
  getLanguageKeyboard() {
    const languages = this.getSupportedLanguages();
    const keyboard = [];
    
    languages.forEach(lang => {
      keyboard.push([{
        text: `${lang.flag} ${lang.name}`,
        callback_data: `set_language|${lang.code}`
      }]);
    });
    
    const backText = this.getText('ru', 'button_back');
    keyboard.push([{ text: backText, callback_data: 'settings' }]);
    
    return keyboard;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
   */
  getLanguageKeyboardLocalized(language) {
    const languages = this.getSupportedLanguages();
    const keyboard = [];
    
    languages.forEach(lang => {
      keyboard.push([{
        text: `${lang.flag} ${lang.name}`,
        callback_data: `set_language|${lang.code}`
      }]);
    });
    
    const backText = this.getText(language, 'button_back');
    keyboard.push([{ text: backText, callback_data: 'settings' }]);
    
    return keyboard;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —è–∑—ã–∫
   */
  addLanguage(code, name, flag, locale) {
    if (this.supportedLanguages[code]) {
      logger.warn(`Language ${code} already exists, overwriting...`);
    }
    
    this.supportedLanguages[code] = {
      name,
      flag,
      locale
    };
    
    logger.info(`Language ${code} (${name}) added successfully`);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —è–∑—ã–∫
   */
  removeLanguage(code) {
    if (code === this.defaultLanguage) {
      throw new Error(`Cannot remove default language: ${code}`);
    }
    
    if (this.supportedLanguages[code]) {
      delete this.supportedLanguages[code];
      logger.info(`Language ${code} removed successfully`);
      return true;
    }
    
    return false;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  setDefaultLanguage(code) {
    if (!this.supportedLanguages[code]) {
      throw new Error(`Language ${code} is not supported`);
    }
    
    this.defaultLanguage = code;
    logger.info(`Default language set to: ${code}`);
  }
}

module.exports = LocalizationService; 