const db = require('../database');
const Formatter = require('../utils/formatter');

class CommandHandlers {
  static async start(ctx) {
    const user = ctx.from;
    await db.createUser(user.id, user.username, user.first_name);

    const message = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
-  \`200 –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\`
-  \`1500 –æ–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\`
-  \`50 –ø—Ä–æ–µ–∑–¥\`

–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é! üè∑Ô∏è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/export - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)
/undo - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/currency - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
/settings - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–∏ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã! üí∞`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [
          [{ text: 'üìã –ú–µ–Ω—é' }],
          [{ text: 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü' }, { text: 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å' }],
          [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å' }],
          [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
  }

  static async help(ctx) {
    const message = `üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:*
–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:
\`200 –ø—Ä–æ–¥—É–∫—Ç—ã\` - –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/total - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
/export - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)
/undo - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/currency - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
/settings - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–°–æ–≤–µ—Ç—ã:*
-  –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é: \`150,50 –∫–æ—Ñ–µ\`
-  –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫
-  –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–º–Ω–∏—Ç—å –Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏–ª
-  –ò—Å–ø–æ–ª—å–∑—É–π /stats —á—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã

–£–¥–∞—á–Ω–æ–≥–æ —É—á—ë—Ç–∞! üí∞`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  static async total(ctx) {
    try {
      const userId = ctx.from.id;
      const userCurrency = await db.getUserCurrency(userId);
      const total = await db.getTotalExpenses(userId, 'month');
      let message;
      if (Array.isArray(total.byCurrency) && total.byCurrency.length > 1) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º formatStats –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
        message = await Formatter.formatStats(total, [], userCurrency, '–º–µ—Å—è—Ü');
      } else {
        message = `üí∞ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü*\n\n` +
          `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *${Formatter.formatAmount(total.total, total.currency || 'RUB')}*\n` +
          `–ó–∞–ø–∏—Å–µ–π: ${total.count}`;
      }
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in total command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö üòû');
    }
  }

  static async dailyHistory(ctx) {
    try {
      const userId = ctx.from.id;
      const userCurrency = await db.getUserCurrency(userId);
      const expenses = await db.getDailyExpenses(userId);
      const total = await db.getTotalExpenses(userId, 'day');
      let message;
      message = await Formatter.formatStats(total, [], userCurrency, '–¥–µ–Ω—å') + '\n' + Formatter.formatExpenseList(expenses);
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in history command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ üòû');
    }
  }

  static async stats(ctx) {
    try {
      const userId = ctx.from.id;
      const userCurrency = await db.getUserCurrency(userId);
      const total = await db.getTotalExpenses(userId, 'month');
      const categoryStats = await db.getExpensesByCategory(userId, 'month');
      
      const message = await Formatter.formatStats(total, categoryStats, userCurrency);
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in stats command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòû');
    }
  }

  static async exportData(ctx) {
    try {
      const userId = ctx.from.id;
      const expenses = await db.exportExpenses(userId);
      if (expenses.length === 0) {
        return await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìù');
      }
      const userCurrency = await db.getUserCurrency(userId);
      const csv = await Formatter.formatCSV(expenses, userCurrency);
      const filename = `expenses_${new Date().toISOString().split('T')[0]}.csv`;
      await ctx.replyWithDocument({
        source: Buffer.from(csv, 'utf-8'),
        filename
      }, {
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${expenses.length}`
      });
    } catch (error) {
      console.error('Error in export command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö üòû');
    }
  }

  static async undo(ctx) {
    try {
      const userId = ctx.from.id;
      const deleted = await db.deleteLastExpense(userId);
      
      if (deleted) {
        const amount = Formatter.formatAmount(deleted.amount);
        const description = deleted.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        await ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${amount} - ${description}`);
      } else {
        await ctx.reply('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü§∑‚Äç‚ôÇÔ∏è');
      }
    } catch (error) {
      console.error('Error in undo command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ üòû');
    }
  }

  static async categories(ctx) {
    try {
      const userId = ctx.from.id;
      const categories = await db.getCategories(userId);

      if (!categories.length) {
        return await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = categories.map(cat => [
        { text: `${cat.icon} ${cat.name}`, callback_data: `show_category|${cat.id}` }
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('Error in categories command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üòû');
    }
  }

  static async currency(ctx) {
    const message = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:';
    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ÇΩ RUB', callback_data: 'set_currency|RUB' },
            { text: '$ USD', callback_data: 'set_currency|USD' },
            { text: '‚Ç¨ EUR', callback_data: 'set_currency|EUR' },
            { text: '‚Ç∏ KZT', callback_data: 'set_currency|KZT' },
            { text: '¬• CNY', callback_data: 'set_currency|CNY' },
            { text: '‡∏ø THB', callback_data: 'set_currency|THB' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_settings' }
          ]
        ]
      }
    });
  }

  static async settings(ctx) {
    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data: 'change_currency' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    });
  }
}

module.exports = CommandHandlers;
