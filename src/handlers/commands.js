const db = require('../database');
const Formatter = require('../utils/formatter');

class CommandHandlers {
  static async start(ctx) {
    const user = ctx.from;
    await db.createUser(user.id, user.username, user.first_name);

    const message = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
-  \`200 –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\`
-  \`1500 –æ–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\`
-  \`50 –ø—Ä–æ–µ–∑–¥\`

–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é! üè∑Ô∏è

*–ö–æ–º–∞–Ω–¥—ã:*
/total - –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü
/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/export - –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
/undo - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–∏ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã! üí∞`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  static async help(ctx) {
    const message = `üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:*
–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:
\`200 –ø—Ä–æ–¥—É–∫—Ç—ã\` - –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/total - —Å—É–º–º–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/export - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)
/undo - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–°–æ–≤–µ—Ç—ã:*
-  –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é: \`150,50 –∫–æ—Ñ–µ\`
-  –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫
-  –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–º–Ω–∏—Ç—å –Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏–ª
-  –ò—Å–ø–æ–ª—å–∑—É–π /stats —á—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã

–£–¥–∞—á–Ω–æ–≥–æ —É—á—ë—Ç–∞! üí∞`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  static async total(ctx) {
    try {
      const userId = ctx.from.id;
      const total = await db.getTotalExpenses(userId, 'month');
      
      const message = `üí∞ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü*\n\n` +
        `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *${Formatter.formatAmount(total.total)}*\n` +
        `–ó–∞–ø–∏—Å–µ–π: ${total.count}`;

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in total command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö üòû');
    }
  }

  static async dailyHistory(ctx) {
    try {
      const userId = ctx.from.id;
      const expenses = await db.getDailyExpenses(userId);
      
      const message = `üìã *–¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å*\n\n${Formatter.
        formatExpenseList(expenses)}\n\n*–ü–æ–∫—É–ø–æ–∫ –∑–∞ –¥–µ–Ω—å: ${expenses.length}* \n\n*–û–±—â–∞—è —Å—É–º–º–∞: ${Formatter.
            formatAmount(expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0))}* `;
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in history command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ üòû');
    }
  }

  static async stats(ctx) {
    try {
      const userId = ctx.from.id;
      const total = await db.getTotalExpenses(userId, 'month');
      const categoryStats = await db.getExpensesByCategory(userId, 'month');
      
      const message = Formatter.formatStats(total, categoryStats);
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in stats command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòû');
    }
  }

  static async exportData(ctx) {
    try {
      const userId = ctx.from.id;
      const expenses = await db.exportExpenses(userId);
      
      if (expenses.length === 0) {
        return await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìù');
      }

      const csv = Formatter.formatCSV(expenses);
      const filename = `expenses_${new Date().toISOString().split('T')[0]}.csv`;
      
      await ctx.replyWithDocument({
        source: Buffer.from(csv, 'utf-8'),
        filename
      }, {
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${expenses.length}`
      });
    } catch (error) {
      console.error('Error in export command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö üòû');
    }
  }

  static async undo(ctx) {
    try {
      const userId = ctx.from.id;
      const deleted = await db.deleteLastExpense(userId);
      
      if (deleted) {
        const amount = Formatter.formatAmount(deleted.amount);
        const description = deleted.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        await ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${amount} - ${description}`);
      } else {
        await ctx.reply('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü§∑‚Äç‚ôÇÔ∏è');
      }
    } catch (error) {
      console.error('Error in undo command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ üòû');
    }
  }

  static async categories(ctx) {
    try {
      const userId = ctx.from.id;
      const categories = await db.getCategories(userId);
      const message = Formatter.formatCategories(categories);
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error in categories command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üòû');
    }
  }
}

module.exports = CommandHandlers;
