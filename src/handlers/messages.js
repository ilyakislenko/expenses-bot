const db = require('../database');
const Validator = require('../utils/validator');
const Formatter = require('../utils/formatter');

class MessageHandlers {
  static async handleExpense(ctx) {
    try {
      const userId = ctx.from.id;
      const text = ctx.message.text;
      
      const parsed = Validator.parseExpense(text);
      
      if (!parsed.isValid) {
        return await ctx.reply(
          '‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: `200 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`',
          { parse_mode: 'Markdown' }
        );
      }

      const expense = await db.addExpense(
        userId, 
        parsed.amount, 
        parsed.description
      );

      const amount = Formatter.formatAmount(expense.amount);
      const description = expense.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      
      await ctx.reply(`‚úÖ –ó–∞–ø–∏—Å–∞–ª: ${amount} - ${description}`);
      
    } catch (error) {
      console.error('Error handling expense:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ üòû');
    }
  }
}

module.exports = MessageHandlers;
