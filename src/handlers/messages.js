const db = require('../database');
const Validator = require('../utils/validator');
const Formatter = require('../utils/formatter');

class MessageHandlers {
  static async handleExpense(ctx) {
    try {
      const userId = ctx.from.id;
      const text = ctx.message.text;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ reply-–∫–Ω–æ–ø–∫—É 'üìã –ú–µ–Ω—é'
      if (text === 'üìã –ú–µ–Ω—é') {
        const CommandHandlers = require('./commands');
        await CommandHandlers.help(ctx);
        return;
      }

      const parsed = Validator.parseExpense(text);
      
      if (!parsed.isValid) {
        return await ctx.reply(
          '‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: `200 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`',
          { parse_mode: 'Markdown' }
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const categories = await db.getCategories(userId);
      
      if (categories.length === 0) {
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        const expense = await db.addExpense(
          userId, 
          parsed.amount, 
          parsed.description
        );

        const amount = Formatter.formatAmount(expense.amount);
        const description = expense.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        
        await ctx.reply(`‚úÖ –ó–∞–ø–∏—Å–∞–ª: ${amount} - ${description}`);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const keyboard = [];
      const row = [];
      
      categories.forEach((category, index) => {
        const button = {
          text: `${category.icon} ${category.name}`,
          callback_data: `category|${parsed.amount}|${parsed.description}|${category.name}`
        };
        
        row.push(button);
        
        // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if (row.length === 2 || index === categories.length - 1) {
          keyboard.push([...row]);
          row.length = 0;
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
      keyboard.push([{
        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        callback_data: 'cancel'
      }]);

      // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCurrency = await db.getUserCurrency(userId);
      const amount = Formatter.formatAmount(parsed.amount, userCurrency);
      const description = parsed.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      
      await ctx.reply(
        `üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:*\n\n` +
        `–°—É–º–º–∞: *${amount}*\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        }
      );
    } catch (error) {
      console.error('Error handling expense:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ üòû');
    }
  }
}

module.exports = MessageHandlers;