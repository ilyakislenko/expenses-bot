const db = require('../database');
const Validator = require('../utils/validator');
const Formatter = require('../utils/formatter');
const pendingExpenses = require('./callbacks').pendingExpenses;
const { errorMessages } = require('../utils/constants');
const userEditState = require('../utils/userEditState');

class MessageHandlers {
  constructor({ expenseService, userService, formatter }) {
    this.expenseService = expenseService;
    this.userService = userService;
    this.formatter = formatter;
  }

  async handleExpense(ctx) {
    try {
      const userId = ctx.from.id;
      const text = ctx.message.text;
      const commandHandlers = require('../../commandHandlersInstance');
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ reply-–∫–Ω–æ–ø–∫—É 'üìã –ú–µ–Ω—é'
      if (text === 'üìã –ú–µ–Ω—é') {
        await commandHandlers.help(ctx);
        return;
      }
      if (text === 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å') {
        await commandHandlers.dailyHistory(ctx);
        return;
      }
      if (text === 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü') {
        await commandHandlers.stats(ctx);
        return;
      }
      if (text === 'üí∞ –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º') {
        await commandHandlers.categories(ctx);
        return;
      }
      if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å') {
        await commandHandlers.undo(ctx);
        return;
      }
      if (ctx.message.text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
        return ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data: 'change_currency' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
            ]
          }
        });
      }
      if (userEditState && userEditState.has(ctx.from.id)) {
        if (ctx.message.text.trim() === '/cancel') {
          userEditState.delete(ctx.from.id);
          return ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        }
        const expenseId = userEditState.get(ctx.from.id);
        const parsed = Validator.parseEditExpense(ctx.message.text);
        if (!parsed.isValid) {
          if (parsed.error === 'empty') {
            return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è.');
          }
          if (parsed.error === 'amount') {
            return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.');
          }
          if (parsed.error === 'too_long') {
            return ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤).');
          }
          return ctx.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.');
        }
        const oldExpense = await this.expenseService.getExpenseById(ctx.from.id, expenseId);
        if (!oldExpense) {
          userEditState.delete(ctx.from.id);
          return ctx.reply('–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
        const newAmount = parsed.amount !== undefined ? parsed.amount : oldExpense.amount;
        const newDescription = parsed.description !== undefined ? parsed.description : oldExpense.description;
        const updated = await this.expenseService.updateExpenseById(ctx.from.id, expenseId, { amount: newAmount, description: newDescription });
        userEditState.delete(ctx.from.id);
        if (updated) {
          return ctx.reply('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        } else {
          return ctx.reply('–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
        }
      }
      const parsed = Validator.parseExpense(text);
      if (!parsed.isValid) {
        const errorMsg = errorMessages[parsed.error] || errorMessages.format;
        return await ctx.reply(errorMsg, { parse_mode: 'Markdown' });
      }
      const categories = await this.expenseService.getCategories(userId);
      if (categories.length === 0) {
        const expense = await this.expenseService.addExpense(
          userId, 
          parsed.amount, 
          parsed.description
        );
        const amount = this.formatter.formatAmount(expense.amount);
        const description = expense.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        await ctx.reply(`‚úÖ –ó–∞–ø–∏—Å–∞–ª: ${amount} - ${description}`);
        return;
      }
      pendingExpenses.set(userId, { amount: parsed.amount, description: parsed.description });
      const keyboard = [];
      const row = [];
      categories.forEach((category, index) => {
        const button = {
          text: `${category.icon} ${category.name}`,
          callback_data: `category|${category.name}`
        };
        row.push(button);
        if (row.length === 2 || index === categories.length - 1) {
          keyboard.push([...row]);
          row.length = 0;
        }
      });
      keyboard.push([{
        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        callback_data: 'cancel'
      }]);
      const userCurrency = await this.userService.getUserCurrency(userId);
      const amount = this.formatter.formatAmount(parsed.amount, userCurrency);
      const description = parsed.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      await ctx.reply(
        `üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:*\n\n` +
        `–°—É–º–º–∞: *${amount}*\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        }
      );
    } catch (error) {
      console.error('Error handling expense:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ üòû');
    }
  }
}

module.exports = MessageHandlers;