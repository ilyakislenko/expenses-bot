const { getTimezoneByCode } = require('../utils/timezone');

class CallbackHandlers {
  constructor({ expenseService, formatter, stateService, userService }) {
    this.expenseService = expenseService;
    this.formatter = formatter;
    this.stateService = stateService;
    this.userService = userService;
  }

  async handleCategorySelection(ctx) {
    const userId = ctx.from.id;
    try {
      const callbackData = ctx.callbackQuery.data;
      const [, categoryName] = callbackData.split('|');
      const pending = this.stateService.getPendingExpense(userId);
      if (!pending) {
        return await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      const { amount, description } = pending;
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
      const button = ctx.callbackQuery.message.reply_markup.inline_keyboard
        .flat()
        .find(btn => btn.callback_data === callbackData);
      if (!button) {
        return await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const expense = await this.expenseService.addExpense(
        userId,
        parseFloat(amount),
        description,
        categoryName
      );
      const formattedAmount = this.formatter.formatAmount(expense.amount, expense.currency);
      const formattedDescription = expense.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"`);
      await ctx.editMessageText(
        `‚úÖ *–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
        `üí∞ –°—É–º–º–∞: *${formattedAmount}*\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${formattedDescription}\n` +
        `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
        { parse_mode: 'Markdown', reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
          ]
        } }
      );
    } catch (error) {
      console.error('Error handling category selection:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      this.stateService.deletePendingExpense(userId);
    }
  }

  async handleCancel(ctx) {
    try {
      await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    } catch (error) {
      console.error('Error handling cancel:', error);
    }
  }

  async handleTimezoneSelection(ctx) {
    const userId = ctx.from.id;
    console.log('=== TIMEZONE SELECTION START ===');
    console.log('Callback data:', ctx.callbackQuery.data);
    try {
      const callbackData = ctx.callbackQuery.data;
      console.log('Full callback data:', callbackData);
      const parts = callbackData.split('|');
      console.log('Split parts:', parts);
      const [, timezoneCode] = parts;
      console.log('Timezone code:', timezoneCode);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ—Ä–æ–¥–æ–≤
      if (callbackData.startsWith('time|')) {
        console.log('=== NEW TIME FORMAT DETECTED ===');
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: time|hour|minute
        const [, hour, minute] = callbackData.split('|');
        console.log('Parsed hour:', hour, 'minute:', minute);
        const { calculateTimezoneFromUserTime, getTimezoneDisplayName } = require('../utils/timezoneCalculator');
        
        console.log(`Timezone calculation: user selected ${hour}:${minute}`);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–∞–∫ –æ–ø–æ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        const selectionTime = new Date();
        const timezone = calculateTimezoneFromUserTime(parseInt(hour), parseInt(minute), selectionTime);
        const displayName = getTimezoneDisplayName(timezone);
        console.log(`Calculated timezone: ${timezone}, display: ${displayName}`);
        console.log(`Reference time: ${selectionTime.toUTCString()}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userService.setUserTimezone(userId, timezone);
        
        await ctx.answerCbQuery(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${displayName}`);
        await ctx.editMessageText(
          `‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n` +
          `üïê –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: *${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}*\n` +
          `üåç –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *${displayName}*\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.`,
          { parse_mode: 'Markdown', reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]
            ]
          } }
        );
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: tz|city
        const { getTimezoneByCode } = require('../utils/timezone');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ timezone –ø–æ –∫–æ–¥—É
        const timezone = getTimezoneByCode(timezoneCode);
        if (!timezone) {
          throw new Error(`Unknown timezone code: ${timezoneCode}`);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userService.setUserTimezone(userId, timezone);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ timezone –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const timezoneLabels = {
          'Europe/Moscow': 'üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)',
          'Europe/London': 'üá¨üáß –õ–æ–Ω–¥–æ–Ω (UTC+0)',
          'America/New_York': 'üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (UTC-5)',
          'America/Los_Angeles': 'üá∫üá∏ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (UTC-8)',
          'Asia/Tokyo': 'üáØüáµ –¢–æ–∫–∏–æ (UTC+9)',
          'Asia/Shanghai': 'üá®üá≥ –®–∞–Ω—Ö–∞–π (UTC+8)',
          'Australia/Sydney': 'üá¶üá∫ –°–∏–¥–Ω–µ–π (UTC+10)',
          'Europe/Berlin': 'üá©üá™ –ë–µ—Ä–ª–∏–Ω (UTC+1)',
          'Europe/Paris': 'üá´üá∑ –ü–∞—Ä–∏–∂ (UTC+1)',
          'Asia/Dubai': 'üá¶üá™ –î—É–±–∞–π (UTC+4)',
          'Asia/Kolkata': 'üáÆüá≥ –ú—É–º–±–∞–∏ (UTC+5:30)',
          'UTC': 'üåê UTC (UTC+0)'
        };
        
        const timezoneLabel = timezoneLabels[timezone] || timezone;
        
        await ctx.answerCbQuery(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezoneLabel}`);
        await ctx.editMessageText(
          `‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n` +
          `üåç –ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *${timezoneLabel}*\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.`,
          { parse_mode: 'Markdown', reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]
            ]
          } }
        );
      }
    } catch (error) {
      console.error('Error handling timezone selection:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞');
    }
  }
}

module.exports = CallbackHandlers; 