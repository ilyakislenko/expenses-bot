const { getTimezoneByCode } = require('../utils/timezone');

class CallbackHandlers {
  constructor({ expenseService, premiumService, localizationService, formatter, stateService, userService, commandHandlers }) {
    this.expenseService = expenseService;
    this.premiumService = premiumService;
    this.localizationService = localizationService;
    this.formatter = formatter;
    this.stateService = stateService;
    this.userService = userService;
    this.commandHandlers = commandHandlers;
  }

  async handleCategorySelection(ctx) {
    const userId = ctx.from.id;
    let userLanguage = 'en'; // fallback —è–∑—ã–∫
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await this.userService.registerUser(userId, ctx.from.username, ctx.from.first_name);
    
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    userLanguage = await this.userService.getUserLanguage(userId);
    
    try {
      const callbackData = ctx.callbackQuery.data;
      const [, categoryName] = callbackData.split('|');
      const pending = this.stateService.getPendingExpense(userId);
      if (!pending) {
        const dataNotFoundText = this.localizationService.getText(userLanguage, 'callback_data_not_found');
        return await ctx.answerCbQuery(dataNotFoundText);
      }
      const { amount, description } = pending;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
      const expenseCountValidation = await this.premiumService.validateExpenseCount(userId);
      if (!expenseCountValidation.isValid) {
        const limitReachedText = this.localizationService.getText(userLanguage, 'callback_limit_reached');
        const errorLimitReachedText = this.localizationService.getText(userLanguage, 'error_limit_reached');
        await ctx.answerCbQuery(limitReachedText);
        await ctx.editMessageText(errorLimitReachedText, { parse_mode: 'Markdown' });
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
      const button = ctx.callbackQuery.message.reply_markup.inline_keyboard
        .flat()
        .find(btn => btn.callback_data === callbackData);
      if (!button) {
        const buttonNotFoundText = this.localizationService.getText(userLanguage, 'callback_button_not_found');
        return await ctx.answerCbQuery(buttonNotFoundText);
      }
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const expense = await this.expenseService.addExpense(
        userId,
        parseFloat(amount),
        description,
        categoryName
      );
      const formattedAmount = this.formatter.formatAmount(expense.amount, expense.currency);
      const formattedDescription = expense.description || this.localizationService.getText(userLanguage, 'not_found');
      
      // –õ–æ–∫–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const localizedCategoryName = this.formatter.translateCategoryName(categoryName, this.localizationService, userLanguage);
      const expenseAddedText = this.localizationService.getText(userLanguage, 'callback_expense_added', { category: localizedCategoryName });
      const backText = this.localizationService.getText(userLanguage, 'button_back');
      
      await ctx.answerCbQuery(expenseAddedText);
      const expenseAddedTitleText = this.localizationService.getText(userLanguage, 'expense_added_title');
      const amountLabelText = this.localizationService.getText(userLanguage, 'amount_label');
      const descriptionLabelText = this.localizationService.getText(userLanguage, 'description_label');
      const categoryLabelText = this.localizationService.getText(userLanguage, 'category_label');
      
      await ctx.editMessageText(
        `‚úÖ *${expenseAddedTitleText}*\n\n` +
        `üí∞ ${amountLabelText}: *${formattedAmount}*\n` +
        `üìù ${descriptionLabelText}: ${formattedDescription}\n` +
        `üè∑Ô∏è ${categoryLabelText}: ${localizedCategoryName}`,
        { parse_mode: 'Markdown', reply_markup: {
          inline_keyboard: [
            [{ text: backText, callback_data: 'back_to_menu' }]
          ]
        } }
      );
    } catch (error) {
      console.error('Error handling category selection:', error);
      const expenseSavedErrorText = this.localizationService.getText(userLanguage, 'callback_expense_saved');
      await ctx.answerCbQuery(expenseSavedErrorText);
    } finally {
      this.stateService.deletePendingExpense(userId);
    }
  }

  async handleCancel(ctx) {
    let userLanguage = 'en'; // fallback —è–∑—ã–∫
    try {
      const userId = ctx.from.id;
      userLanguage = await this.userService.getUserLanguage(userId);
      
      const canceledText = this.localizationService.getText(userLanguage, 'callback_canceled');
      const expenseCanceledText = this.localizationService.getText(userLanguage, 'callback_expense_canceled');
      
      await ctx.answerCbQuery(canceledText);
      await ctx.editMessageText(expenseCanceledText);
    } catch (error) {
      console.error('Error handling cancel:', error);
    }
  }

  async handleTimezoneSelection(ctx) {
    const userId = ctx.from.id;
    let userLanguage = 'en'; // fallback —è–∑—ã–∫
    userLanguage = await this.userService.getUserLanguage(userId);
    const backText = this.localizationService.getText(userLanguage, 'button_back');
    try {
      const callbackData = ctx.callbackQuery.data;
      const parts = callbackData.split('|');
      const [, timezoneCode] = parts;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ—Ä–æ–¥–æ–≤
      if (callbackData.startsWith('time|')) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: time|hour|minute
        const [, hour, minute] = callbackData.split('|');
        const { calculateTimezoneFromUserTime, getTimezoneDisplayName } = require('../utils/timezoneCalculator');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∫–∞–∫ –æ–ø–æ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        const selectionTime = new Date();
        const timezone = calculateTimezoneFromUserTime(parseInt(hour), parseInt(minute), selectionTime);
        const displayName = getTimezoneDisplayName(timezone);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userService.setUserTimezone(userId, timezone);
        
        const timezoneSetText = this.localizationService.getText(userLanguage, 'timezone_set', { timezone: displayName });
        const timezoneUpdatedText = this.localizationService.getText(userLanguage, 'timezone_updated', { 
          time: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
          timezone: displayName 
        });
        
        await ctx.answerCbQuery(timezoneSetText);
        await ctx.editMessageText(timezoneUpdatedText,
          { parse_mode: 'Markdown', reply_markup: {
            inline_keyboard: [
              [{ text: backText, callback_data: 'back_to_settings' }]
            ]
          } }
        );
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: tz|city
        const { getTimezoneByCode } = require('../utils/timezone');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ timezone –ø–æ –∫–æ–¥—É
        const timezone = getTimezoneByCode(timezoneCode);
        if (!timezone) {
          throw new Error(`Unknown timezone code: ${timezoneCode}`);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userService.setUserTimezone(userId, timezone);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ timezone –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const timezoneLabels = {
          'Europe/Moscow': 'üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)',
          'Europe/London': 'üá¨üáß –õ–æ–Ω–¥–æ–Ω (UTC+0)',
          'America/New_York': 'üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (UTC-5)',
          'America/Los_Angeles': 'üá∫üá∏ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (UTC-8)',
          'Asia/Tokyo': 'üáØüáµ –¢–æ–∫–∏–æ (UTC+9)',
          'Asia/Shanghai': 'üá®üá≥ –®–∞–Ω—Ö–∞–π (UTC+8)',
          'Australia/Sydney': 'üá¶üá∫ –°–∏–¥–Ω–µ–π (UTC+10)',
          'Europe/Berlin': 'üá©üá™ –ë–µ—Ä–ª–∏–Ω (UTC+1)',
          'Europe/Paris': 'üá´üá∑ –ü–∞—Ä–∏–∂ (UTC+1)',
          'Asia/Dubai': 'üá¶üá™ –î—É–±–∞–π (UTC+4)',
          'Asia/Kolkata': 'üáÆüá≥ –ú—É–º–±–∞–∏ (UTC+5:30)',
          'UTC': 'üåê UTC (UTC+0)'
        };
        
        const timezoneLabel = timezoneLabels[timezone] || timezone;
        
        const timezoneSetText = this.localizationService.getText(userLanguage, 'timezone_set', { timezone: timezoneLabel });
        const timezoneUpdatedText = this.localizationService.getText(userLanguage, 'timezone_updated_simple', { timezone: timezoneLabel });
        
        await ctx.answerCbQuery(timezoneSetText);
        await ctx.editMessageText(timezoneUpdatedText,
          { parse_mode: 'Markdown', reply_markup: {
            inline_keyboard: [
              [{ text: backText, callback_data: 'back_to_settings' }]
            ]
          } }
        );
      }
    } catch (error) {
      console.error('Error handling timezone selection:', error);
      const timezoneErrorText = this.localizationService.getText(userLanguage, 'timezone_error');
      await ctx.answerCbQuery(timezoneErrorText);
    }
  }

  async handleLanguageSelection(ctx) {
    const userId = ctx.from.id;
    let userLanguage = 'en'; // fallback —è–∑—ã–∫
    userLanguage = await this.userService.getUserLanguage(userId);
    const backText = this.localizationService.getText(userLanguage, 'button_back');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await this.userService.registerUser(userId, ctx.from.username, ctx.from.first_name);
    
    try {
      const callbackData = ctx.callbackQuery.data;
      const [, languageCode] = callbackData.split('|');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
      if (!this.localizationService.isLanguageSupported(languageCode)) {
        const languageNotSupportedText = this.localizationService.getText(userLanguage, 'language_not_supported');
        await ctx.answerCbQuery(languageNotSupportedText);
        return;
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userService.setUserLanguage(userId, languageCode);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
      const languageSetMessage = this.localizationService.getText(languageCode, 'language_set');
      
      await ctx.answerCbQuery(languageSetMessage);
      await ctx.editMessageText(languageSetMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: backText, callback_data: 'back_to_settings' }]
          ]
        }
      });
    } catch (error) {
      console.error('Error handling language selection:', error);
      const languageChangeErrorText = this.localizationService.getText(userLanguage, 'language_change_error');
      await ctx.answerCbQuery(languageChangeErrorText);
    }
  }

  async handleBack(ctx) {
    const userId = ctx.from.id;
    let userLanguage = 'en';
    
    try {
      userLanguage = await this.userService.getUserLanguage(userId);
      
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.answerCbQuery();
      await this.commandHandlers.mainMenu(ctx);
    } catch (error) {
      console.error('Error handling back navigation:', error);
      const errorText = this.localizationService.getText(userLanguage, 'error');
      await ctx.answerCbQuery(errorText);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await this.commandHandlers.mainMenu(ctx);
    }
  }


}

module.exports = CallbackHandlers; 