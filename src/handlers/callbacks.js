const db = require('../database');
const Formatter = require('../utils/formatter');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const pendingExpenses = new Map();

class CallbackHandlers {
  static async handleCategorySelection(ctx) {
    const userId = ctx.from.id;
    try {
      const callbackData = ctx.callbackQuery.data;
      const [, categoryName] = callbackData.split('|');
      const pending = pendingExpenses.get(userId);
      if (!pending) {
        return await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      const { amount, description } = pending;
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
      const button = ctx.callbackQuery.message.reply_markup.inline_keyboard
        .flat()
        .find(btn => btn.callback_data === callbackData);
      if (!button) {
        return await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É)
      console.log(categoryName, {ctx: button});
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const expense = await db.addExpense(
        userId,
        parseFloat(amount),
        description,
        categoryName
      );
      const formattedAmount = Formatter.formatAmount(expense.amount, expense.currency);
      const formattedDescription = expense.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"`);
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await ctx.editMessageText(
        `‚úÖ *–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
        `üí∞ –°—É–º–º–∞: *${formattedAmount}*\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${formattedDescription}\n` +
        `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Error handling category selection:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      pendingExpenses.delete(userId);
    }
  }

  static async handleCancel(ctx) {
    try {
      await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    } catch (error) {
      console.error('Error handling cancel:', error);
    }
  }
}

module.exports = CallbackHandlers;
module.exports.pendingExpenses = pendingExpenses; 