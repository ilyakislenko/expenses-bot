const Container = require('../container');

// Mock repositories
jest.mock('../repositories/UserRepository', () => {
  return jest.fn().mockImplementation(() => ({
    getUserById: jest.fn().mockResolvedValue({ id: 123456, premium: false }),
    getUserLanguage: jest.fn().mockResolvedValue('ru'),
    getUserTimezone: jest.fn().mockResolvedValue('UTC'),
    getUserCurrency: jest.fn().mockResolvedValue('RUB')
  }));
});

jest.mock('../repositories/ExpenseRepository', () => {
  return jest.fn().mockImplementation(() => ({
    getExpenseCount: jest.fn().mockResolvedValue(45)
  }));
});

describe('Premium Subscription Menu', () => {
  let commandHandlers;
  let callbackHandlers;
  let localizationService;
  let premiumService;
  let keyboardGenerators;

  beforeEach(() => {
    const container = new Container();
    commandHandlers = container.get('commandHandlers');
    callbackHandlers = container.get('callbackHandlers');
    localizationService = container.get('localizationService');
    premiumService = container.get('premiumService');
    keyboardGenerators = container.get('keyboardGenerators');
  });

  describe('Inline Menu Integration', () => {
    it('should include premium subscription button in inline main menu', () => {
      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key) => {
        const texts = {
          'premium_subscription_title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞',
          'button_help': '‚ùì –°–ø—Ä–∞–≤–∫–∞',
          'button_expenses_month': 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü',
          'button_expenses_day': 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å',
          'button_expenses_categories': 'üí∞ –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
          'button_family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è',
          'button_settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
          'button_delete_last': 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å'
        };
        return texts[key] || key;
      });

      const inlineMenu = keyboardGenerators.generateInlineMainMenu('ru');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–µ–Ω—é
      const premiumButton = inlineMenu.flat().find(button => 
        button.callback_data === 'premium_subscription'
      );

      expect(premiumButton).toBeDefined();
      expect(premiumButton.text).toBe('‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞');
      expect(premiumButton.callback_data).toBe('premium_subscription');
    });

    it('should display premium subscription button in /menu command', async () => {
      const mockCtx = {
        from: { id: 123456 },
        reply: jest.fn()
      };

      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key) => {
        const texts = {
          'main_menu_title': 'üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          'premium_subscription_title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞',
          'button_help': '‚ùì –°–ø—Ä–∞–≤–∫–∞',
          'button_expenses_month': 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü',
          'button_expenses_day': 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å',
          'button_expenses_categories': 'üí∞ –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
          'button_family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è',
          'button_settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
          'button_delete_last': 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å'
        };
        return texts[key] || key;
      });

      await commandHandlers.mainMenu(mockCtx);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*'),
        expect.objectContaining({
          parse_mode: 'Markdown',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'premium_subscription' })
              ])
            ])
          })
        })
      );
    });
  });

  describe('CommandHandlers.premiumSubscription', () => {
    it('should generate premium subscription menu with user status', async () => {
      // Mock context
      const mockCtx = {
        from: { id: 123456 },
        reply: jest.fn()
      };

      // Mock premium service
      const mockLimitsInfo = {
        isPremium: false,
        currentCount: 45,
        maxCount: 100,
        remaining: 55,
        maxDescriptionLength: 80,
        percentage: 45
      };

      jest.spyOn(premiumService, 'getLimitsInfo').mockResolvedValue(mockLimitsInfo);
      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key, params) => {
        const texts = {
          'premium_subscription_title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞',
          'premium_status_header': '<b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>',
          'status_regular': 'üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç',
          'premium_privileges': `–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: ${params?.status || 'üë§ –û–±—ã—á–Ω—ã–π'}`,
          'records_usage': `<b>–ó–∞–ø–∏—Å–µ–π:</b> ${params?.current || 0}/${params?.max || 0} (${params?.percentage || 0}%)`,
          'records_remaining': `<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${params?.remaining || 0} –∑–∞–ø–∏—Å–µ–π`,
          'max_description_length': `<b>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è:</b> ${params?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`,
          'premium_menu_title': '<b>–ú–µ–Ω—é:</b>',
          'premium_tariff_button': '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ',
          'premium_why_paid_button': 'üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?',
          'premium_back_button': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
        };
        return texts[key] || key;
      });

      await commandHandlers.premiumSubscription(mockCtx);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ', callback_data: 'premium_tariffs' })
              ]),
              expect.arrayContaining([
                expect.objectContaining({ text: 'üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?', callback_data: 'premium_why_paid' })
              ]),
              expect.arrayContaining([
                expect.objectContaining({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' })
              ])
            ])
          })
        })
      );
    });

    it('should generate premium subscription menu with premium user and expiry date', async () => {
      // Mock context
      const mockCtx = {
        from: { id: 123456 },
        reply: jest.fn()
      };

      // Mock premium service with premium user
      const mockLimitsInfo = {
        isPremium: true,
        currentCount: 45,
        maxCount: 1000,
        remaining: 955,
        maxDescriptionLength: 200,
        percentage: 4.5,
        premiumExpiresAt: new Date('2025-12-31T23:59:59.000Z'),
        daysRemaining: 145
      };

      jest.spyOn(premiumService, 'getLimitsInfo').mockResolvedValue(mockLimitsInfo);
      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key, params) => {
        const texts = {
          'premium_subscription_title': '‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞',
          'premium_status_header': '<b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>',
          'status_premium': '‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º',
          'premium_privileges': `–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: ${params?.status || 'üë§ –û–±—ã—á–Ω—ã–π'}`,
          'records_usage': `<b>–ó–∞–ø–∏—Å–µ–π:</b> ${params?.current || 0}/${params?.max || 0} (${params?.percentage || 0}%)`,
          'records_remaining': `<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${params?.remaining || 0} –∑–∞–ø–∏—Å–µ–π`,
          'max_description_length': `<b>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è:</b> ${params?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`,
          'premium_expires': `üìÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: <b>${params?.date || 'Unknown'}</b>\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>${params?.days || 0}</b>`,
          'premium_menu_title': '<b>–ú–µ–Ω—é:</b>',
          'premium_tariff_button': '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ',
          'premium_why_paid_button': 'üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?',
          'premium_back_button': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
        };
        return texts[key] || key;
      });

      await commandHandlers.premiumSubscription(mockCtx);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞'),
        expect.stringContaining('üìÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ:'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ', callback_data: 'premium_tariffs' })
              ]),
              expect.arrayContaining([
                expect.objectContaining({ text: 'üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?', callback_data: 'premium_why_paid' })
              ]),
              expect.arrayContaining([
                expect.objectContaining({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' })
              ])
            ])
          })
        })
      );
    });
  });

  describe('CallbackHandlers.premiumTariffs', () => {
    it('should display premium tariffs information', async () => {
      const mockCtx = {
        from: { id: 123456 },
        editMessageText: jest.fn(),
        answerCbQuery: jest.fn()
      };

      // Mock PaymentService
      const mockPaymentService = {
        createInvoiceLink: jest.fn().mockResolvedValue('https://t.me/bot?invoice=test_link')
      };
      callbackHandlers.paymentService = mockPaymentService;

      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key) => {
        const texts = {
          'premium_tariffs_title': '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ—ã (Telegram Stars)',
          'premium_payment_info': 'üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é Telegram Stars',
          'premium_renewal_info': 'üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç',
          'premium_stars_info': 'üí° –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏',
          'premium_back_button': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
        };
        return texts[key] || key;
      });

      await callbackHandlers.handlePremiumTariffs(mockCtx);

      expect(mockCtx.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining('‚≠êÔ∏è –¢–∞—Ä–∏—Ñ—ã (Telegram Stars)'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'premium_subscription' })
              ])
            ])
          })
        })
      );
    });
  });

  describe('CallbackHandlers.premiumWhyPaid', () => {
    it('should display why service is paid information', async () => {
      const mockCtx = {
        from: { id: 123456 },
        editMessageText: jest.fn()
      };

      jest.spyOn(localizationService, 'getText').mockImplementation((lang, key) => {
        const texts = {
          'premium_why_paid_title': 'üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?',
          'premium_why_paid_text': '–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
          'premium_back_button': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
        };
        return texts[key] || key;
      });

      await callbackHandlers.handlePremiumWhyPaid(mockCtx);

      expect(mockCtx.editMessageText).toHaveBeenCalledWith(
        expect.stringContaining('üëÄ –ü–æ—á–µ–º—É —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–Ω—ã–π?'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'premium_subscription' })
              ])
            ])
          })
        })
      );
    });
  });
}); 