// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞

const errorMessages = {
  too_long: '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n–ú–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤.',
  no_description: '‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å—É–º–º—ã.',
  amount: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 999999.',
  format: '‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `200 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`'
};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const MAIN_MENU_KEYBOARD = [
  [{ text: 'üìã –ú–µ–Ω—é' }],
  [{ text: 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü' }, { text: 'üí∞ –¢—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å' }],
  [{ text: 'üí∞ –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' }],
  [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
  [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å' }]
];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
const CURRENCY_KEYBOARD = [
  [
    { text: '‚ÇΩ RUB', callback_data: 'set_currency|RUB' },
    { text: '$ USD', callback_data: 'set_currency|USD' },
    { text: '‚Ç¨ EUR', callback_data: 'set_currency|EUR' },
    { text: '‚Ç∏ KZT', callback_data: 'set_currency|KZT' },
    { text: '¬• CNY', callback_data: 'set_currency|CNY' },
    { text: '‡∏ø THB', callback_data: 'set_currency|THB' }
  ],
  [
    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_settings' }
  ]
];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SETTINGS_KEYBOARD = [
  [{ text: '–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data: 'change_currency' }],
  [{ text: 'üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data: 'change_timezone' }],
  [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
function generateTimeKeyboard() {
  const keyboard = [];
  const currentUtcTime = new Date();
  const currentUtcHours = currentUtcTime.getUTCHours();
  const currentUtcMinutes = currentUtcTime.getUTCMinutes();
  
  // –°–æ–∑–¥–∞–µ–º 6 —Ä—è–¥–æ–≤ –ø–æ 4 –∫–Ω–æ–ø–∫–∏ (0-23 —á–∞—Å–∞)
  for (let row = 0; row < 6; row++) {
    const rowButtons = [];
    for (let col = 0; col < 4; col++) {
      const hour = row * 4 + col;
      if (hour <= 23) {
        const timeText = `${hour.toString().padStart(2, '0')}:${currentUtcMinutes.toString().padStart(2, '0')}`;
        rowButtons.push({
          text: timeText,
          callback_data: `time|${hour}|${currentUtcMinutes}`
        });
      }
    }
    if (rowButtons.length > 0) {
      keyboard.push(rowButtons);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_settings' }]);
  
  return keyboard;
}

const USER_LIMITS = {
  regular: {
    MAX_DESCRIPTION_LENGTH: 60,
    MAX_NOTES_PER_MONTH: 100,
    NOTE_RETENTION_DAYS: 30,
    ALLOW_CUSTOM_CATEGORIES: false,
    MAX_CUSTOM_CATEGORIES: 0,
  },
  premium: {
    MAX_DESCRIPTION_LENGTH: 120,
    MAX_NOTES_PER_MONTH: 300,
    NOTE_RETENTION_DAYS: null, // null = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
    ALLOW_CUSTOM_CATEGORIES: true,
    MAX_CUSTOM_CATEGORIES: 5,
  }
};

module.exports = {
  errorMessages,
  MAIN_MENU_KEYBOARD,
  CURRENCY_KEYBOARD,
  SETTINGS_KEYBOARD,
  USER_LIMITS,
  generateTimeKeyboard
}; 